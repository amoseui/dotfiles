" ============================================================================
" .vimrc of amoseui
" ============================================================================

" no compatibility to trditional vi
set nocompatible

" install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" constants
let $CHROMIUM_PATH=$HOME . '/Workspace/chromium'
let $CHROMIUM_SRC_PATH=$CHROMIUM_PATH . '/src'

" ----------------------------------------------------------------------------
" VIM-PLUG BEGIN
" ----------------------------------------------------------------------------
call plug#begin('~/.vim/plugged')

" theme
Plug 'nanotech/jellybeans.vim'

" edit
Plug 'tpope/vim-commentary'
Plug 'Valloric/YouCompleteMe', { 'do': 'python3 ./install.py --clang-completer' }

" browsing
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree'
Plug 'mhinz/vim-startify'

" git
Plug 'airblade/vim-gitgutter' " show git diff of a current file
Plug 'rhysd/committia.vim' " split windows for git commit
Plug 'tpope/vim-fugitive' " Gblame
Plug 'vim-airline/vim-airline' " bottom bar
Plug 'vim-airline/vim-airline-themes'

" lang
Plug 'https://gn.googlesource.com/gn', { 'rtp': 'tools/gn/misc/vim' }
if isdirectory($CHROMIUM_PATH)
  Plug '$CHROMIUM_SRC_PATH/tools/vim/mojom'
endif

Plug 'vimwiki/vimwiki'

call plug#end()

" ----------------------------------------------------------------------------
" BASIC SETTINGS
" ----------------------------------------------------------------------------

" set encoding
language messages en_US.UTF-8
set langmenu=en_US.UTF-8
set encoding=utf-8

"English spelling checker.
setlocal spelllang=en_us

colorscheme jellybeans
let g:airline_theme='jellybeans'

set autowrite
set number " show line numbers
set colorcolumn=80 " keep 80 columns.
set cursorline " highlight current cursor line
set hlsearch " highlight search
set ignorecase " ignore case on search
set infercase " adjust case on autocomplete
set scrolloff=5 " cursor offset by lines
set showmatch " show the matched bracket
set matchpairs+=<:> " add match pairs
set linebreak

" tab and indent
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2
set smarttab
set autoindent
set smartindent

" show tab characters
set list listchars=tab:»\ ,trail:·

" browse files to open as zsh style
set wildmenu
set wildmode=longest:list,full

" TODO: need to check on linux
"set mouse=c

" remove whitespaces
autocmd BufWritePre * %s/\s\+$//e

" :W sudo saves the file
" (useful for handling the permission-denied error)
command W w !sudo tee % > /dev/null

au FileType gitcommit setl spell
au FileType make setl ts=4 sw=4 sts=4

" ----------------------------------------------------------------------------
" chromium
" ----------------------------------------------------------------------------
if isdirectory($CHROMIUM_PATH)
  source $CHROMIUM_SRC_PATH/tools/vim/clang-format.vim
  source $CHROMIUM_SRC_PATH/tools/vim/filetypes.vim
  let g:ycm_global_ycm_extra_conf=$CHROMIUM_PATH.'/.ycm_extra_conf.py'
endif

" ----------------------------------------------------------------------------
" python
" ----------------------------------------------------------------------------

" ----------------------------------------------------------------------------
" vimwiki
" ----------------------------------------------------------------------------
let wiki = {}
let wiki.path = '~/Workspace/wiki/_wiki'
let wiki.ext = '.md'

let g:vimwiki_list = [wiki]
let g:vimwiki_conceallevel = 0

let g:ycm_filetype_blacklist = {}

function! LastModified()
    if &modified
        let save_cursor = getpos(".")
        let n = min([10, line("$")])
        keepjumps exe '1,' . n . 's#^\(.\{,10}updated\s*: \).*#\1' .
              \ strftime('%Y-%m-%d %H:%M:%S +0900') . '#e'
        call histdel('search', -1)
        call setpos('.', save_cursor)
    endif
endfun

function! NewTemplate()

    let l:wiki_directory = v:false

    for wiki in g:vimwiki_list
        if expand('%:p:h') == expand(wiki.path)
            let l:wiki_directory = v:true
            break
        endif
    endfor

    if !l:wiki_directory
        return
    endif

    if line("$") > 1
        return
    endif

    let l:template = []
    call add(l:template, '---')
    call add(l:template, 'layout  : wiki')
    call add(l:template, 'title   : ')
    call add(l:template, 'summary : ')
    call add(l:template, 'date    : ' . strftime('%Y-%m-%d %H:%M:%S +0900'))
    call add(l:template, 'updated : ' . strftime('%Y-%m-%d %H:%M:%S +0900'))
    call add(l:template, 'tag     : ')
    call add(l:template, 'toc     : true')
    call add(l:template, 'public  : true')
    call add(l:template, 'parent  : ')
    call add(l:template, 'latex   : false')
    call add(l:template, '---')
    call add(l:template, '* TOC')
    call add(l:template, '{:toc}')
    call add(l:template, '')
    call add(l:template, '# ')
    call setline(1, l:template)
    execute 'normal! G'
    execute 'normal! $'

    echom 'new wiki page has created'
endfunction

augroup vimwikiauto
    autocmd BufWritePre *wiki/*.md keepjumps call LastModified()
    autocmd BufRead,BufNewFile *wiki/*.md call NewTemplate()
augroup END

" ----------------------------------------------------------------------------
" Startify
" ----------------------------------------------------------------------------
let g:startify_list_order = [
            \ ['    Sessions'],
            \'sessions',
            \ ['    Most Recently Used files'],
            \'files',
            \'bookmarks',
            \ ['    Commands'],
            \'commands'
            \]

" ----------------------------------------------------------------------------
" KEY MAPPINGS
" ----------------------------------------------------------------------------
map <C-n> :NERDTreeToggle<CR>
map <C-G> :pyf ~/.vim/plugged/gn/tools/gn/misc/vim/gn-format.py<CR>

